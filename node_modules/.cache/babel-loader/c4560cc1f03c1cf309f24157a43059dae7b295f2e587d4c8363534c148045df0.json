{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  assign: null,\n  searchParamsToUrlQuery: null,\n  urlQueryToSearchParams: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  assign: function () {\n    return assign;\n  },\n  searchParamsToUrlQuery: function () {\n    return searchParamsToUrlQuery;\n  },\n  urlQueryToSearchParams: function () {\n    return urlQueryToSearchParams;\n  }\n});\nfunction searchParamsToUrlQuery(searchParams) {\n  const query = {};\n  for (const [key, value] of searchParams.entries()) {\n    const existing = query[key];\n    if (typeof existing === 'undefined') {\n      query[key] = value;\n    } else if (Array.isArray(existing)) {\n      existing.push(value);\n    } else {\n      query[key] = [existing, value];\n    }\n  }\n  return query;\n}\nfunction stringifyUrlQueryParam(param) {\n  if (typeof param === 'string') {\n    return param;\n  }\n  if (typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {\n    return String(param);\n  } else {\n    return '';\n  }\n}\nfunction urlQueryToSearchParams(query) {\n  const searchParams = new URLSearchParams();\n  for (const [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        searchParams.append(key, stringifyUrlQueryParam(item));\n      }\n    } else {\n      searchParams.set(key, stringifyUrlQueryParam(value));\n    }\n  }\n  return searchParams;\n}\nfunction assign(target) {\n  for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    searchParamsList[_key - 1] = arguments[_key];\n  }\n  for (const searchParams of searchParamsList) {\n    for (const key of searchParams.keys()) {\n      target.delete(key);\n    }\n    for (const [key, value] of searchParams.entries()) {\n      target.append(key, value);\n    }\n  }\n  return target;\n}","map":{"version":3,"names":["assign","searchParamsToUrlQuery","urlQueryToSearchParams","searchParams","query","key","value","entries","existing","Array","isArray","push","stringifyUrlQueryParam","param","isNaN","String","URLSearchParams","Object","item","append","set","target","_len","arguments","length","searchParamsList","_key","keys","delete"],"sources":["C:\\Users\\Subham Kumar\\Desktop\\node_modules\\next\\src\\shared\\lib\\router\\utils\\querystring.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  for (const [key, value] of searchParams.entries()) {\n    const existing = query[key]\n    if (typeof existing === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(existing)) {\n      existing.push(value)\n    } else {\n      query[key] = [existing, value]\n    }\n  }\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: unknown): string {\n  if (typeof param === 'string') {\n    return param\n  }\n\n  if (\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(query: ParsedUrlQuery): URLSearchParams {\n  const searchParams = new URLSearchParams()\n  for (const [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        searchParams.append(key, stringifyUrlQueryParam(item))\n      }\n    } else {\n      searchParams.set(key, stringifyUrlQueryParam(value))\n    }\n  }\n  return searchParams\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  for (const searchParams of searchParamsList) {\n    for (const key of searchParams.keys()) {\n      target.delete(key)\n    }\n\n    for (const [key, value] of searchParams.entries()) {\n      target.append(key, value)\n    }\n  }\n\n  return target\n}\n"],"mappings":";;;;;;;;;;;;;;;;;EAgDgBA,MAAM,WAAAA,CAAA;WAANA,MAAA;;EA9CAC,sBAAsB,WAAAA,CAAA;WAAtBA,sBAAA;;EAgCAC,sBAAsB,WAAAA,CAAA;WAAtBA,sBAAA;;;AAhCT,SAASD,uBACdE,YAA6B;EAE7B,MAAMC,KAAA,GAAwB,CAAC;EAC/B,KAAK,MAAM,CAACC,GAAA,EAAKC,KAAA,CAAM,IAAIH,YAAA,CAAaI,OAAO,IAAI;IACjD,MAAMC,QAAA,GAAWJ,KAAK,CAACC,GAAA,CAAI;IAC3B,IAAI,OAAOG,QAAA,KAAa,aAAa;MACnCJ,KAAK,CAACC,GAAA,CAAI,GAAGC,KAAA;IACf,OAAO,IAAIG,KAAA,CAAMC,OAAO,CAACF,QAAA,GAAW;MAClCA,QAAA,CAASG,IAAI,CAACL,KAAA;IAChB,OAAO;MACLF,KAAK,CAACC,GAAA,CAAI,GAAG,CAACG,QAAA,EAAUF,KAAA,CAAM;IAChC;EACF;EACA,OAAOF,KAAA;AACT;AAEA,SAASQ,uBAAuBC,KAAc;EAC5C,IAAI,OAAOA,KAAA,KAAU,UAAU;IAC7B,OAAOA,KAAA;EACT;EAEA,IACE,OAAQA,KAAA,KAAU,YAAY,CAACC,KAAA,CAAMD,KAAA,KACrC,OAAOA,KAAA,KAAU,WACjB;IACA,OAAOE,MAAA,CAAOF,KAAA;EAChB,OAAO;IACL,OAAO;EACT;AACF;AAEO,SAASX,uBAAuBE,KAAqB;EAC1D,MAAMD,YAAA,GAAe,IAAIa,eAAA;EACzB,KAAK,MAAM,CAACX,GAAA,EAAKC,KAAA,CAAM,IAAIW,MAAA,CAAOV,OAAO,CAACH,KAAA,GAAQ;IAChD,IAAIK,KAAA,CAAMC,OAAO,CAACJ,KAAA,GAAQ;MACxB,KAAK,MAAMY,IAAA,IAAQZ,KAAA,EAAO;QACxBH,YAAA,CAAagB,MAAM,CAACd,GAAA,EAAKO,sBAAA,CAAuBM,IAAA;MAClD;IACF,OAAO;MACLf,YAAA,CAAaiB,GAAG,CAACf,GAAA,EAAKO,sBAAA,CAAuBN,KAAA;IAC/C;EACF;EACA,OAAOH,YAAA;AACT;AAEO,SAASH,OACdqB,MAAuB;EACvB,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,gBAAG,GAAH,IAAAhB,KAAA,CAAAa,IAAA,OAAAA,IAAA,WAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;IAAGD,gBAAA,CAAHC,IAAA,QAAAH,SAAA,CAAAG,IAAA,CAAsC;;EAEtC,KAAK,MAAMvB,YAAA,IAAgBsB,gBAAA,EAAkB;IAC3C,KAAK,MAAMpB,GAAA,IAAOF,YAAA,CAAawB,IAAI,IAAI;MACrCN,MAAA,CAAOO,MAAM,CAACvB,GAAA;IAChB;IAEA,KAAK,MAAM,CAACA,GAAA,EAAKC,KAAA,CAAM,IAAIH,YAAA,CAAaI,OAAO,IAAI;MACjDc,MAAA,CAAOF,MAAM,CAACd,GAAA,EAAKC,KAAA;IACrB;EACF;EAEA,OAAOe,MAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}