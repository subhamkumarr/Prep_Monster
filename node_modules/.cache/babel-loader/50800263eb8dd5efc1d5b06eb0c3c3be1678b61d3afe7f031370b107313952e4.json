{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  normalizeAppPath: null,\n  normalizeRscURL: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  normalizeAppPath: function () {\n    return normalizeAppPath;\n  },\n  normalizeRscURL: function () {\n    return normalizeRscURL;\n  }\n});\nconst _ensureleadingslash = require(\"../../page-path/ensure-leading-slash\");\nconst _segment = require(\"../../segment\");\nfunction normalizeAppPath(route) {\n  return (0, _ensureleadingslash.ensureLeadingSlash)(route.split('/').reduce((pathname, segment, index, segments) => {\n    // Empty segments are ignored.\n    if (!segment) {\n      return pathname;\n    }\n    // Groups are ignored.\n    if ((0, _segment.isGroupSegment)(segment)) {\n      return pathname;\n    }\n    // Parallel segments are ignored.\n    if (segment[0] === '@') {\n      return pathname;\n    }\n    // The last segment (if it's a leaf) should be ignored.\n    if ((segment === 'page' || segment === 'route') && index === segments.length - 1) {\n      return pathname;\n    }\n    return pathname + \"/\" + segment;\n  }, ''));\n}\nfunction normalizeRscURL(url) {\n  return url.replace(/\\.rsc($|\\?)/,\n  // $1 ensures `?` is preserved\n  '$1');\n}","map":{"version":3,"names":["normalizeAppPath","normalizeRscURL","route","_ensureleadingslash","ensureLeadingSlash","split","reduce","pathname","segment","index","segments","_segment","isGroupSegment","length","url","replace"],"sources":["C:\\Users\\Subham Kumar\\Desktop\\node_modules\\next\\src\\shared\\lib\\router\\utils\\app-paths.ts"],"sourcesContent":["import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;EAsBgBA,gBAAgB,WAAAA,CAAA;WAAhBA,gBAAA;;EAmCAC,eAAe,WAAAA,CAAA;WAAfA,eAAA;;;oCAzDmB;yBACJ;AAqBxB,SAASD,iBAAiBE,KAAa;EAC5C,OAAO,IAAAC,mBAAA,CAAAC,kBAAkB,EACvBF,KAAA,CAAMG,KAAK,CAAC,KAAKC,MAAM,CAAC,CAACC,QAAA,EAAUC,OAAA,EAASC,KAAA,EAAOC,QAAA;IACjD;IACA,IAAI,CAACF,OAAA,EAAS;MACZ,OAAOD,QAAA;IACT;IAEA;IACA,IAAI,IAAAI,QAAA,CAAAC,cAAc,EAACJ,OAAA,GAAU;MAC3B,OAAOD,QAAA;IACT;IAEA;IACA,IAAIC,OAAO,CAAC,EAAE,KAAK,KAAK;MACtB,OAAOD,QAAA;IACT;IAEA;IACA,IACE,CAACC,OAAA,KAAY,UAAUA,OAAA,KAAY,OAAM,KACzCC,KAAA,KAAUC,QAAA,CAASG,MAAM,GAAG,GAC5B;MACA,OAAON,QAAA;IACT;IAEA,OAAOA,QAAG,GAAS,MAAGC,OAAA;EACxB,GAAG;AAEP;AAMO,SAASP,gBAAgBa,GAAW;EACzC,OAAOA,GAAA,CAAIC,OAAO,CAChB;EACA;EACA;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}