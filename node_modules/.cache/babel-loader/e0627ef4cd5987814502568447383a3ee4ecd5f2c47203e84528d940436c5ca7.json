{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Subham Kumar\\\\Desktop\\\\MyPrep\\\\dsa-patterns\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Container, Typography, Box, AppBar, Toolbar, IconButton } from '@mui/material';\nimport DarkModeOutlinedIcon from '@mui/icons-material/DarkModeOutlined';\nimport WbSunnyOutlinedIcon from '@mui/icons-material/WbSunnyOutlined';\nimport { patterns as initialPatterns } from './data/patterns';\nimport Author from './pages/Author';\nimport Companies from './pages/Companies';\nimport AmazonQuestions from './pages/AmazonQuestions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = 'dsaPatternsProgress';\nconst DARK_MODE_STORAGE_KEY = 'darkModePreference';\nfunction MainContent({\n  darkMode,\n  patterns,\n  searchTerm,\n  handleSearchChange,\n  patternFilter,\n  handlePatternChange,\n  difficultyFilter,\n  handleDifficultyChange,\n  showStarredOnly,\n  toggleStarredOnly,\n  handleOpenResetDialog,\n  overallProgress,\n  difficultyProgress,\n  filteredPatterns,\n  starredPatterns,\n  toggleStarPattern,\n  handleQuestionStatusChange,\n  memoizedToggleStarQuestion,\n  openResetDialog,\n  handleCloseResetDialog,\n  handleConfirmReset\n}) {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    sx: {\n      mt: 4,\n      mb: 4,\n      px: {\n        xs: 2,\n        sm: 3,\n        md: 4\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_c = MainContent;\nfunction App() {\n  _s();\n  const [darkMode, setDarkMode] = useState(() => {\n    const savedMode = localStorage.getItem(DARK_MODE_STORAGE_KEY);\n    return savedMode ? JSON.parse(savedMode) : false;\n  });\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [patterns, setPatterns] = useState(() => {\n    const savedPatterns = localStorage.getItem(LOCAL_STORAGE_KEY);\n    return savedPatterns ? JSON.parse(savedPatterns) : initialPatterns;\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [difficultyFilter, setDifficultyFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [patternFilter, setPatternFilter] = useState('all');\n  const [patternSearchTerm, setPatternSearchTerm] = useState('');\n  const [showStarredOnly, setShowStarredOnly] = useState(false);\n  const [starredPatterns, setStarredPatterns] = useState(new Set());\n  const [overallProgress, setOverallProgress] = useState(0);\n  const [difficultyProgress, setDifficultyProgress] = useState({\n    easy: {\n      completed: 0,\n      total: 0,\n      percentage: 0\n    },\n    medium: {\n      completed: 0,\n      total: 0,\n      percentage: 0\n    },\n    hard: {\n      completed: 0,\n      total: 0,\n      percentage: 0\n    }\n  });\n  const [openResetDialog, setOpenResetDialog] = useState(false);\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(patterns));\n    localStorage.setItem(DARK_MODE_STORAGE_KEY, JSON.stringify(darkMode));\n    let totalQuestions = 0;\n    let completedQuestions = 0;\n    let easyCompleted = 0,\n      easyTotal = 0;\n    let mediumCompleted = 0,\n      mediumTotal = 0;\n    let hardCompleted = 0,\n      hardTotal = 0;\n    patterns.forEach(pattern => {\n      totalQuestions += pattern.questions.length;\n      completedQuestions += pattern.questions.filter(q => q.status === 'Completed').length;\n      pattern.questions.forEach(question => {\n        if (question.difficulty === 'Easy') {\n          easyTotal++;\n          if (question.status === 'Completed') easyCompleted++;\n        } else if (question.difficulty === 'Medium') {\n          mediumTotal++;\n          if (question.status === 'Completed') mediumCompleted++;\n        } else if (question.difficulty === 'Hard') {\n          hardTotal++;\n          if (question.status === 'Completed') hardCompleted++;\n        }\n      });\n    });\n    setOverallProgress(totalQuestions === 0 ? 0 : completedQuestions / totalQuestions * 100);\n    setDifficultyProgress({\n      easy: {\n        completed: easyCompleted,\n        total: easyTotal,\n        percentage: easyTotal === 0 ? 0 : easyCompleted / easyTotal * 100\n      },\n      medium: {\n        completed: mediumCompleted,\n        total: mediumTotal,\n        percentage: mediumTotal === 0 ? 0 : mediumCompleted / mediumTotal * 100\n      },\n      hard: {\n        completed: hardCompleted,\n        total: hardTotal,\n        percentage: hardTotal === 0 ? 0 : hardCompleted / hardTotal * 100\n      }\n    });\n  }, [patterns, darkMode]);\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handleDifficultyChange = event => {\n    setDifficultyFilter(event.target.value);\n  };\n  const handleStatusChange = event => {\n    setStatusFilter(event.target.value);\n  };\n  const handlePatternSearchChange = event => {\n    setPatternSearchTerm(event.target.value);\n  };\n  const handlePatternChange = event => {\n    setPatternFilter(event.target.value);\n  };\n  const toggleStarredOnly = () => {\n    setShowStarredOnly(prev => !prev);\n  };\n  const toggleStarPattern = patternName => {\n    setStarredPatterns(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(patternName)) {\n        newSet.delete(patternName);\n      } else {\n        newSet.add(patternName);\n      }\n      return newSet;\n    });\n  };\n  const handleQuestionStatusChange = React.useCallback((patternName, questionName, newStatus) => {\n    setPatterns(prevPatterns => {\n      return prevPatterns.map(pattern => {\n        if (pattern.name === patternName) {\n          const updatedQuestions = pattern.questions.map(question => {\n            if (question.name === questionName) {\n              return {\n                ...question,\n                status: newStatus\n              };\n            }\n            return question;\n          });\n\n          // Calculate new progress\n          const completedQuestions = updatedQuestions.filter(q => q.status === 'Completed').length;\n          return {\n            ...pattern,\n            questions: updatedQuestions,\n            progress: {\n              completed: completedQuestions,\n              total: updatedQuestions.length\n            }\n          };\n        }\n        return pattern;\n      });\n    });\n  }, []);\n  const toggleStarQuestion = (patternName, questionName) => {\n    setPatterns(prevPatterns => {\n      return prevPatterns.map(pattern => {\n        if (pattern.name === patternName) {\n          const updatedQuestions = pattern.questions.map(question => {\n            if (question.name === questionName) {\n              return {\n                ...question,\n                starred: !question.starred\n              };\n            }\n            return question;\n          });\n          return {\n            ...pattern,\n            questions: updatedQuestions\n          };\n        }\n        return pattern;\n      });\n    });\n  };\n  const filteredPatterns = patterns.filter(pattern => {\n    const matchesPattern = patternFilter === 'all' || pattern.name === patternFilter;\n    const questionsMatchFilters = pattern.questions.filter(question => {\n      const matchesSearch = searchTerm === '' || question.name.toLowerCase().includes(searchTerm.toLowerCase()) || pattern.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesDifficulty = difficultyFilter === 'all' || question.difficulty === difficultyFilter;\n      const matchesStatus = statusFilter === 'all' || question.status === statusFilter;\n      const matchesStarred = !showStarredOnly || question.starred;\n      return matchesSearch && matchesDifficulty && matchesStatus && matchesStarred;\n    });\n    return matchesPattern && questionsMatchFilters.length > 0;\n  }).map(pattern => {\n    const questionsMatchFilters = pattern.questions.filter(question => {\n      const matchesSearch = searchTerm === '' || question.name.toLowerCase().includes(searchTerm.toLowerCase()) || pattern.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesDifficulty = difficultyFilter === 'all' || question.difficulty === difficultyFilter;\n      const matchesStatus = statusFilter === 'all' || question.status === statusFilter;\n      const matchesStarred = !showStarredOnly || question.starred;\n      return matchesSearch && matchesDifficulty && matchesStatus && matchesStarred;\n    });\n    return {\n      ...pattern,\n      questions: questionsMatchFilters\n    };\n  });\n  const memoizedToggleStarQuestion = React.useCallback((patternName, questionName) => {\n    setPatterns(prevPatterns => {\n      return prevPatterns.map(pattern => {\n        if (pattern.name === patternName) {\n          const updatedQuestions = pattern.questions.map(question => {\n            if (question.name === questionName) {\n              return {\n                ...question,\n                starred: !question.starred\n              };\n            }\n            return question;\n          });\n          return {\n            ...pattern,\n            questions: updatedQuestions\n          };\n        }\n        return pattern;\n      });\n    });\n  }, []);\n  const handleOpenResetDialog = () => {\n    setOpenResetDialog(true);\n  };\n  const handleCloseResetDialog = () => {\n    setOpenResetDialog(false);\n  };\n  const handleConfirmReset = () => {\n    setSearchTerm('');\n    setDifficultyFilter('all');\n    setStatusFilter('all');\n    setPatternFilter('all');\n    setShowStarredOnly(false);\n    setStarredPatterns(new Set());\n    const resetPatterns = initialPatterns.map(pattern => ({\n      ...pattern,\n      questions: pattern.questions.map(question => ({\n        ...question,\n        status: 'Not Started',\n        starred: false\n      })),\n      progress: {\n        completed: 0,\n        total: pattern.questions.length\n      }\n    }));\n    setPatterns(resetPatterns);\n    handleCloseResetDialog();\n  };\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const filteredPatternOptions = initialPatterns.filter(pattern => pattern.name.toLowerCase().includes(patternSearchTerm.toLowerCase()));\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n  const handleMobileMenuClose = () => {\n    setMobileMenuOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    basename: \"/Prep_Monster\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        bgcolor: darkMode ? '#121212' : '#f5f5f5',\n        minHeight: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        position: \"static\",\n        sx: {\n          bgcolor: darkMode ? '#1e1e1e' : '#ffffff',\n          boxShadow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"div\",\n            sx: {\n              flexGrow: 1,\n              color: darkMode ? '#ffffff' : '#333333'\n            },\n            children: \"DSA Patterns\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleDarkMode,\n            sx: {\n              color: darkMode ? '#ffffff' : '#333333'\n            },\n            children: darkMode ? /*#__PURE__*/_jsxDEV(WbSunnyOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 27\n            }, this) : /*#__PURE__*/_jsxDEV(DarkModeOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(MainContent, {\n            darkMode: darkMode,\n            patterns: patterns,\n            searchTerm: searchTerm,\n            handleSearchChange: handleSearchChange,\n            patternFilter: patternFilter,\n            handlePatternChange: handlePatternChange,\n            difficultyFilter: difficultyFilter,\n            handleDifficultyChange: handleDifficultyChange,\n            showStarredOnly: showStarredOnly,\n            toggleStarredOnly: toggleStarredOnly,\n            handleOpenResetDialog: handleOpenResetDialog,\n            overallProgress: overallProgress,\n            difficultyProgress: difficultyProgress,\n            filteredPatterns: filteredPatterns,\n            starredPatterns: starredPatterns,\n            toggleStarPattern: toggleStarPattern,\n            handleQuestionStatusChange: handleQuestionStatusChange,\n            memoizedToggleStarQuestion: memoizedToggleStarQuestion,\n            openResetDialog: openResetDialog,\n            handleCloseResetDialog: handleCloseResetDialog,\n            handleConfirmReset: handleConfirmReset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/author\",\n          element: /*#__PURE__*/_jsxDEV(Author, {\n            darkMode: darkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/companies\",\n          element: /*#__PURE__*/_jsxDEV(Companies, {\n            darkMode: darkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/amazon-questions\",\n          element: /*#__PURE__*/_jsxDEV(AmazonQuestions, {\n            darkMode: darkMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SpU+Ae/29ZJFimorOfrR9B4qsU0=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"MainContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Routes","Route","Container","Typography","Box","AppBar","Toolbar","IconButton","DarkModeOutlinedIcon","WbSunnyOutlinedIcon","patterns","initialPatterns","Author","Companies","AmazonQuestions","jsxDEV","_jsxDEV","LOCAL_STORAGE_KEY","DARK_MODE_STORAGE_KEY","MainContent","darkMode","searchTerm","handleSearchChange","patternFilter","handlePatternChange","difficultyFilter","handleDifficultyChange","showStarredOnly","toggleStarredOnly","handleOpenResetDialog","overallProgress","difficultyProgress","filteredPatterns","starredPatterns","toggleStarPattern","handleQuestionStatusChange","memoizedToggleStarQuestion","openResetDialog","handleCloseResetDialog","handleConfirmReset","maxWidth","sx","mt","mb","px","xs","sm","md","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","setDarkMode","savedMode","localStorage","getItem","JSON","parse","mobileMenuOpen","setMobileMenuOpen","setPatterns","savedPatterns","setSearchTerm","setDifficultyFilter","statusFilter","setStatusFilter","setPatternFilter","patternSearchTerm","setPatternSearchTerm","setShowStarredOnly","setStarredPatterns","Set","setOverallProgress","setDifficultyProgress","easy","completed","total","percentage","medium","hard","setOpenResetDialog","setItem","stringify","totalQuestions","completedQuestions","easyCompleted","easyTotal","mediumCompleted","mediumTotal","hardCompleted","hardTotal","forEach","pattern","questions","length","filter","q","status","question","difficulty","event","target","value","handleStatusChange","handlePatternSearchChange","prev","patternName","newSet","has","delete","add","useCallback","questionName","newStatus","prevPatterns","map","name","updatedQuestions","progress","toggleStarQuestion","starred","matchesPattern","questionsMatchFilters","matchesSearch","toLowerCase","includes","matchesDifficulty","matchesStatus","matchesStarred","resetPatterns","toggleDarkMode","filteredPatternOptions","toggleMobileMenu","handleMobileMenuClose","basename","children","flexGrow","bgcolor","minHeight","position","boxShadow","variant","component","color","onClick","path","element","_c2","$RefreshReg$"],"sources":["C:/Users/Subham Kumar/Desktop/MyPrep/dsa-patterns/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Link as RouterLink } from 'react-router-dom';\nimport {\n  Container,\n  Typography,\n  TextField,\n  Box,\n  Grid,\n  AppBar,\n  Toolbar,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  SelectChangeEvent,\n  Link,\n  IconButton,\n  LinearProgress,\n  Switch,\n  FormControlLabel,\n  CircularProgress,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Card,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  Divider\n} from '@mui/material';\nimport type { GridProps } from '@mui/material/Grid';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport SearchIcon from '@mui/icons-material/Search';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport StarIcon from '@mui/icons-material/Star';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport TuneIcon from '@mui/icons-material/Tune';\nimport AssignmentTurnedInOutlinedIcon from '@mui/icons-material/AssignmentTurnedInOutlined';\nimport DarkModeOutlinedIcon from '@mui/icons-material/DarkModeOutlined';\nimport WbSunnyOutlinedIcon from '@mui/icons-material/WbSunnyOutlined';\nimport { motion } from 'framer-motion';\n\nimport { patterns as initialPatterns, Pattern, Question } from './data/patterns';\nimport PatternCard from './components/PatternCard';\nimport Author from './pages/Author';\nimport Companies from './pages/Companies';\nimport AmazonQuestions from './pages/AmazonQuestions';\n\nconst LOCAL_STORAGE_KEY = 'dsaPatternsProgress';\nconst DARK_MODE_STORAGE_KEY = 'darkModePreference';\n\ninterface MainContentProps {\n  darkMode: boolean;\n  patterns: Pattern[];\n  searchTerm: string;\n  handleSearchChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  patternFilter: string;\n  handlePatternChange: (event: SelectChangeEvent) => void;\n  difficultyFilter: string;\n  handleDifficultyChange: (event: SelectChangeEvent) => void;\n  showStarredOnly: boolean;\n  toggleStarredOnly: () => void;\n  handleOpenResetDialog: () => void;\n  overallProgress: number;\n  difficultyProgress: {\n    easy: { completed: number; total: number; percentage: number };\n    medium: { completed: number; total: number; percentage: number };\n    hard: { completed: number; total: number; percentage: number };\n  };\n  filteredPatterns: Pattern[];\n  starredPatterns: Set<string>;\n  toggleStarPattern: (patternName: string) => void;\n  handleQuestionStatusChange: (patternName: string, questionName: string, newStatus: Question['status']) => void;\n  memoizedToggleStarQuestion: (patternName: string, questionName: string) => void;\n  openResetDialog: boolean;\n  handleCloseResetDialog: () => void;\n  handleConfirmReset: () => void;\n}\n\nfunction MainContent({\n  darkMode,\n  patterns,\n  searchTerm,\n  handleSearchChange,\n  patternFilter,\n  handlePatternChange,\n  difficultyFilter,\n  handleDifficultyChange,\n  showStarredOnly,\n  toggleStarredOnly,\n  handleOpenResetDialog,\n  overallProgress,\n  difficultyProgress,\n  filteredPatterns,\n  starredPatterns,\n  toggleStarPattern,\n  handleQuestionStatusChange,\n  memoizedToggleStarQuestion,\n  openResetDialog,\n  handleCloseResetDialog,\n  handleConfirmReset\n}: MainContentProps) {\n  return (\n    <Container maxWidth={false} sx={{ mt: 4, mb: 4, px: { xs: 2, sm: 3, md: 4 } }}>\n      {/* Main content from the original App component */}\n    </Container>\n  );\n}\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(() => {\n    const savedMode = localStorage.getItem(DARK_MODE_STORAGE_KEY);\n    return savedMode ? JSON.parse(savedMode) : false;\n  });\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [patterns, setPatterns] = useState<Pattern[]>(() => {\n    const savedPatterns = localStorage.getItem(LOCAL_STORAGE_KEY);\n    return savedPatterns ? JSON.parse(savedPatterns) : initialPatterns;\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [difficultyFilter, setDifficultyFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [patternFilter, setPatternFilter] = useState<string>('all');\n  const [patternSearchTerm, setPatternSearchTerm] = useState('');\n  const [showStarredOnly, setShowStarredOnly] = useState(false);\n  const [starredPatterns, setStarredPatterns] = useState<Set<string>>(new Set());\n  const [overallProgress, setOverallProgress] = useState(0);\n  const [difficultyProgress, setDifficultyProgress] = useState({\n    easy: { completed: 0, total: 0, percentage: 0 },\n    medium: { completed: 0, total: 0, percentage: 0 },\n    hard: { completed: 0, total: 0, percentage: 0 },\n  });\n  const [openResetDialog, setOpenResetDialog] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(patterns));\n    localStorage.setItem(DARK_MODE_STORAGE_KEY, JSON.stringify(darkMode));\n    let totalQuestions = 0;\n    let completedQuestions = 0;\n    let easyCompleted = 0, easyTotal = 0;\n    let mediumCompleted = 0, mediumTotal = 0;\n    let hardCompleted = 0, hardTotal = 0;\n\n    patterns.forEach(pattern => {\n      totalQuestions += pattern.questions.length;\n      completedQuestions += pattern.questions.filter(q => q.status === 'Completed').length;\n\n      pattern.questions.forEach(question => {\n        if (question.difficulty === 'Easy') {\n          easyTotal++;\n          if (question.status === 'Completed') easyCompleted++;\n        } else if (question.difficulty === 'Medium') {\n          mediumTotal++;\n          if (question.status === 'Completed') mediumCompleted++;\n        } else if (question.difficulty === 'Hard') {\n          hardTotal++;\n          if (question.status === 'Completed') hardCompleted++;\n        }\n      });\n    });\n\n    setOverallProgress(totalQuestions === 0 ? 0 : (completedQuestions / totalQuestions) * 100);\n    setDifficultyProgress({\n      easy: { completed: easyCompleted, total: easyTotal, percentage: easyTotal === 0 ? 0 : (easyCompleted / easyTotal) * 100 },\n      medium: { completed: mediumCompleted, total: mediumTotal, percentage: mediumTotal === 0 ? 0 : (mediumCompleted / mediumTotal) * 100 },\n      hard: { completed: hardCompleted, total: hardTotal, percentage: hardTotal === 0 ? 0 : (hardCompleted / hardTotal) * 100 },\n    });\n  }, [patterns, darkMode]);\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleDifficultyChange = (event: SelectChangeEvent) => {\n    setDifficultyFilter(event.target.value);\n  };\n\n  const handleStatusChange = (event: SelectChangeEvent) => {\n    setStatusFilter(event.target.value);\n  };\n\n  const handlePatternSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPatternSearchTerm(event.target.value);\n  };\n\n  const handlePatternChange = (event: SelectChangeEvent) => {\n    setPatternFilter(event.target.value);\n  };\n\n  const toggleStarredOnly = () => {\n    setShowStarredOnly(prev => !prev);\n  };\n\n  const toggleStarPattern = (patternName: string) => {\n    setStarredPatterns(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(patternName)) {\n        newSet.delete(patternName);\n      } else {\n        newSet.add(patternName);\n      }\n      return newSet;\n    });\n  };\n\n  const handleQuestionStatusChange = React.useCallback((patternName: string, questionName: string, newStatus: Question['status']) => {\n    setPatterns(prevPatterns => {\n      return prevPatterns.map(pattern => {\n        if (pattern.name === patternName) {\n          const updatedQuestions = pattern.questions.map(question => {\n            if (question.name === questionName) {\n              return { ...question, status: newStatus };\n            }\n            return question;\n          });\n          \n          // Calculate new progress\n          const completedQuestions = updatedQuestions.filter(q => q.status === 'Completed').length;\n          return { \n            ...pattern, \n            questions: updatedQuestions,\n            progress: {\n              completed: completedQuestions,\n              total: updatedQuestions.length\n            }\n          };\n        }\n        return pattern;\n      });\n    });\n  }, []);\n\n  const toggleStarQuestion = (patternName: string, questionName: string) => {\n    setPatterns(prevPatterns => {\n      return prevPatterns.map(pattern => {\n        if (pattern.name === patternName) {\n          const updatedQuestions = pattern.questions.map(question => {\n            if (question.name === questionName) {\n              return { ...question, starred: !question.starred };\n            }\n            return question;\n          });\n          return { ...pattern, questions: updatedQuestions };\n        }\n        return pattern;\n      });\n    });\n  };\n\n  const filteredPatterns = patterns.filter(pattern => {\n    const matchesPattern = patternFilter === 'all' || pattern.name === patternFilter;\n\n    const questionsMatchFilters = pattern.questions.filter(question => {\n      const matchesSearch = searchTerm === '' || \n        question.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        pattern.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesDifficulty = difficultyFilter === 'all' || question.difficulty === difficultyFilter;\n      const matchesStatus = statusFilter === 'all' || question.status === statusFilter;\n      const matchesStarred = !showStarredOnly || question.starred;\n\n      return matchesSearch && matchesDifficulty && matchesStatus && matchesStarred;\n    });\n\n    return matchesPattern && questionsMatchFilters.length > 0;\n  }).map(pattern => {\n    const questionsMatchFilters = pattern.questions.filter(question => {\n      const matchesSearch = searchTerm === '' || \n        question.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        pattern.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesDifficulty = difficultyFilter === 'all' || question.difficulty === difficultyFilter;\n      const matchesStatus = statusFilter === 'all' || question.status === statusFilter;\n      const matchesStarred = !showStarredOnly || question.starred;\n      return matchesSearch && matchesDifficulty && matchesStatus && matchesStarred;\n    });\n    return { ...pattern, questions: questionsMatchFilters };\n  });\n\n  const memoizedToggleStarQuestion = React.useCallback((patternName: string, questionName: string) => {\n    setPatterns(prevPatterns => {\n      return prevPatterns.map(pattern => {\n        if (pattern.name === patternName) {\n          const updatedQuestions = pattern.questions.map(question => {\n            if (question.name === questionName) {\n              return { ...question, starred: !question.starred };\n            }\n            return question;\n          });\n          return { ...pattern, questions: updatedQuestions };\n        }\n        return pattern;\n      });\n    });\n  }, []);\n\n  const handleOpenResetDialog = () => {\n    setOpenResetDialog(true);\n  };\n\n  const handleCloseResetDialog = () => {\n    setOpenResetDialog(false);\n  };\n\n  const handleConfirmReset = () => {\n    setSearchTerm('');\n    setDifficultyFilter('all');\n    setStatusFilter('all');\n    setPatternFilter('all');\n    setShowStarredOnly(false);\n    setStarredPatterns(new Set());\n\n    const resetPatterns = initialPatterns.map(pattern => ({\n      ...pattern,\n      questions: pattern.questions.map(question => ({\n        ...question,\n        status: 'Not Started' as Question['status'],\n        starred: false,\n      })),\n      progress: { completed: 0, total: pattern.questions.length }\n    }));\n    setPatterns(resetPatterns);\n\n    handleCloseResetDialog();\n  };\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const filteredPatternOptions = initialPatterns.filter(pattern => \n    pattern.name.toLowerCase().includes(patternSearchTerm.toLowerCase())\n  );\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMenuOpen(false);\n  };\n\n  return (\n    <BrowserRouter basename=\"/Prep_Monster\">\n      <Box sx={{ \n        flexGrow: 1, \n        bgcolor: darkMode ? '#121212' : '#f5f5f5',\n        minHeight: '100vh'\n      }}>\n        <AppBar position=\"static\" sx={{ bgcolor: darkMode ? '#1e1e1e' : '#ffffff', boxShadow: 1 }}>\n          <Toolbar>\n            <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, color: darkMode ? '#ffffff' : '#333333' }}>\n              DSA Patterns\n            </Typography>\n            <IconButton onClick={toggleDarkMode} sx={{ color: darkMode ? '#ffffff' : '#333333' }}>\n              {darkMode ? <WbSunnyOutlinedIcon /> : <DarkModeOutlinedIcon />}\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n\n        <Routes>\n          <Route path=\"/\" element={\n            <MainContent \n              darkMode={darkMode}\n              patterns={patterns}\n              searchTerm={searchTerm}\n              handleSearchChange={handleSearchChange}\n              patternFilter={patternFilter}\n              handlePatternChange={handlePatternChange}\n              difficultyFilter={difficultyFilter}\n              handleDifficultyChange={handleDifficultyChange}\n              showStarredOnly={showStarredOnly}\n              toggleStarredOnly={toggleStarredOnly}\n              handleOpenResetDialog={handleOpenResetDialog}\n              overallProgress={overallProgress}\n              difficultyProgress={difficultyProgress}\n              filteredPatterns={filteredPatterns}\n              starredPatterns={starredPatterns}\n              toggleStarPattern={toggleStarPattern}\n              handleQuestionStatusChange={handleQuestionStatusChange}\n              memoizedToggleStarQuestion={memoizedToggleStarQuestion}\n              openResetDialog={openResetDialog}\n              handleCloseResetDialog={handleCloseResetDialog}\n              handleConfirmReset={handleConfirmReset}\n            />\n          } />\n          <Route path=\"/author\" element={<Author darkMode={darkMode} />} />\n          <Route path=\"/companies\" element={<Companies darkMode={darkMode} />} />\n          <Route path=\"/amazon-questions\" element={<AmazonQuestions darkMode={darkMode} />} />\n        </Routes>\n      </Box>\n    </BrowserRouter>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}